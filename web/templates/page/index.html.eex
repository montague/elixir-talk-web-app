<style>
  .red{color: red}
  .center{text-align: center}
</style>
<div>
  <ul>
    <li>Elixir background (jose valim built it after getting frustrated working on adding concurrency support to rails.</li>
    <li>See http://www.infoq.com/interviews/valim-elixir</li>
  </ul>
</div>
<div>
  Brief tour of language features
  <ul>
    <li>pattern matching</li>
    <li>anonymous functions</li>
    <li>protocols</li>
    <li>macros</li>
    <li>guard clauses</li>
  </ul>
</div>

<!-- Pattern Matching -->
<div class="red">Pattern Matching</div>
<div>
  <code><pre>
    defmodule Food do
      def is_good?(:pizza), do: true
      def is_good?(:sardines), do: false
    end
  </pre></code>
</div>
<div>iex</div>
<div>What happens if we pass something that doesn't match?</div>
<!-- go to iex and Food.is_good? :chicken_faces -->
<div>Let's fix this.</div>
<div>
  <code><pre>
    defmodule Food do
      def is_good?(unknown_food) do
        IO.puts "I haven't tried #{unknown_food}"
        nil # implicit return
      end
      def is_good?(:sardines), do: false
      def is_good?(:pizza), do: true
    end
  </pre></code>
</div>
<!-- error due to order of pattern matching -->
<div>
  <code><pre>
    defmodule Food do
      # this should work :)
      def is_good?(:sardines), do: false
      def is_good?(:pizza), do: true
      def is_good?(_) do
        IO.puts "I haven't tried it!"
        nil # implicit return
      end
    end
  </pre></code>
</div>
<!-- guard clauses -->
<div class="red">Guard Clauses</div>
<div>
  <code><pre>
    defmodule Person do
      def is_cool?(name, _) when name == :ian, do: true
      def is_cool?(_, age) when age &gt; 10 and age &lt;= 13, do: false
      def is_cool?(name, age) do
        IO.puts "Of course #{name}, age #{age} is cool!!"
        true
      end
    end
  </pre></code>
</div>

<!-- anonymous functions -->
<div>Anonymous Functions</div>
<!-- Protocols -->
<div>Protocols</div>
<!-- macros -->
<div class="red">Macros</div>
<div>Brief tour of build tools (show cool bits)
  -- documentation
  -- spec tag (read up on typespecs: http://elixir-lang.org/docs/stable/elixir/Kernel.Typespec.html)
</div>
<div>Code Demo: Demonstrate message-passing (open two processes, send a message between them)</div>
<div>show how message passing allows maintaining state without mutation (stays functional)</div>
<div>talk about this in terms of web development</div>
<div>Introduce phoenix</div>
<div>each request is an elixir process (light weight, lots can be running at once</div>
<div>long-running request does not affect througput (expound on this)</div>
