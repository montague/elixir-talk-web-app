<div>
  <h2>Elixir!</h2>
</div>
<div>Erlang for the people</div>
<div>
  <h3 class="center">Instead of</h3>
  <code><pre>
    -module(pizza).
    -export([eat/0]).

    eat -&gt;
      io:fwrite("Eating pizza!\n").
  </pre></code>
</div>
<div>
  <h3>Ruby-inspired syntax</h3>
  <code><pre>
    defmodule Pizza do
      def eat do
        IO.puts "Eating pizza!"
      end
    end
  </pre></code>
</div>
<div class="red">Background</div>
<div>
  <ul>
    <li>Built by <em>Jose Valim</em> (5th highest committer to rails)</li>
    <li>He got frustrated trying to add concurrency support to rails</li>
  </ul>
</div>
<div>
  <h3>Runs on the Erlang VM</h3>
  <ul>
    <li>first version in 1986, open-sourced in 1998</li>
    <li>focus on soft-real time apps</li>
    <li>hot code upgrades</li>
  </ul>
</div>
<div><strong>Robust.</strong></div>
<div>
  Build applications that are...
  <ul>
    <li>concurrent</li>
    <li>distributed</li>
    <li>fault tolerant</li>
  </ul>
</div>
<div>
  Language features
  <ul>
    <li>pattern matching</li>
    <li>guard clauses</li>
    <li>anonymous functions</li>
    <li>protocols</li>
    <li>macros</li>
  </ul>
</div>

<!-- Pattern Matching -->
<div class="red">Pattern Matching</div>
<div>
  <code><pre>
    defmodule Food do
      def ian_likes?(:pizza), do: true
      def ian_likes?(:sardines), do: false
    end
  </pre></code>
</div>
<div>
  What happens if something doesn't match?
</div>
<div>
  <code><pre>
    defmodule Food do
      def ian_likes?(unknown_food) do
        IO.puts "I haven't tried #{unknown_food}"
        nil # implicit return
      end
      def ian_likes?(:sardines), do: false
      def ian_likes?(:pizza), do: true
    end
  </pre></code>
</div>
<!-- error due to order of pattern matching -->
<div>
  <code><pre>
    defmodule Food do
      def ian_likes?(:sardines), do: false
      def ian_likes?(:pizza), do: true
      def ian_likes?(_) do
        IO.puts "I haven't tried it!"
        nil # implicit return
      end
    end
  </pre></code>
</div>
<!-- guard clauses -->
<div class="red">Guard Clauses</div>
<div>
  <code><pre>
    defmodule Person do
      def is_cool?(name, _) when name == :ian, do: true
      def is_cool?(_, age) when age &gt; 10 and age &lt;= 13, do: false
      def is_cool?(name, age) do
        IO.puts "Of course #{name}, age #{age} is cool!!"
        true
      end
    end
  </pre></code>
</div>

<!-- anonymous functions -->
<div class="red">Anonymous Functions</div>
<div>
  <code><pre>
    # first-class functions
    anonymous = fn caller -&gt; IO.puts "#{caller} called anonymous!" end
  </pre></code>
</div>
<div>
  <code><pre>
    # defined inline
    Enum.map([1,2,3], fn x -&gt; x * x end)
  </pre></code>
</div>
<div>
  <code><pre>
    # currying
    feed_animal = fn (animal) -&gt;
      fn (amount) -&gt; IO.puts "You fed the #{animal} #{amount}" end
    end
  </pre></code>
</div>

<!-- Protocols -->
<div class="red">Protocols</div>
<div>Protocols are how elixir implements polymorphism</div>
<div>
  <code><pre>
    defprotocol Awesomeness do
      def has_it?(data)
    end

    defimpl Awesomeness, for: BitString do
      def has_it?(str), do: str == "elixir"
    end

    defimpl Awesomeness, for: Atom do
      def has_it?(atom), do: atom == :elixir
    end
  </pre></code>
</div>
<div>What about all the other types?</div>
<div>
  <code><pre>
    defprotocol Awesomeness do
      @fallback_to_any true
      def has_it?(data)
    end

    defimpl Awesomeness, for: BitString do
      def has_it?(str), do: str == "elixir"
    end

    defimpl Awesomeness, for: Atom do
      def has_it?(atom), do: atom == :elixir
    end

    defimpl Awesomeness, for: Any do
      def has_it?(_), do: false
    end
  </pre></code>
</div>

<!-- macros -->
<div class="red">Macros</div>
<div>Macros are how Elixir implements <em>metaprogramming</em></div>
<div>Based on the manipulation of Elixir's AST</div>
<div>
  <h3>Code is represented in tuples</h3>
  <code><pre>
    &gt; quote do: 2 + 2
      # =&gt; {:+, [context: Elixir, import: Kernel], [2, 2]}
  </pre></code>
</div>
<div>A macro manipulates elixir's inner representation of the code</div>
<div>
  <code><pre>
    defmodule IdentifyYourself do
      defmacro whoami(name) do
        quote do
          def unquote(name)(), do: "I am #{unquote(name)}"
        end
      end
    end

    defmodule People do
      import IdentifyYourself
      whoami :person
      whoami :faceman
    end
  </pre></code>
</div>

<!-- TOOLS! -->
<div class="red">Mix!!</div>
<div>Mix is elixir's butler</div>
<div> With mix, you can...</div>
<div>
  <code><pre>
    # compile your code into an executable
    &gt; mix escript.build
  </pre></code>
</div>
<div>
  <code><pre>
    # start a new project
    &gt; mix new my_awesome_project
  </pre></code>
</div>
<div>
  <code><pre>
    # install dependencies
    &gt; mix deps.get
  </pre></code>
</div>
<div>
  <code><pre>
    # run your project
    &gt; mix run my_awesome_project
  </pre></code>
</div>
<div>
  <code><pre>
    # anything else you program it to do
    &gt; mix paypal.be_agile
  </pre></code>
</div>
<!-- testing -->
<div class="red">Testing</div>
<div>ExUnit is elixir's test framework</div>
<div>
  <code><pre>
  # From http://elixir-lang.org/docs/stable/ex_unit/
  # File: assertion_test.exs

  # 1) Start ExUnit.
  ExUnit.start

  # 2) Create a new test module (test case) and use [`ExUnit.Case`](ExUnit.Case.html).
  defmodule AssertionTest do
    # 3) Notice we pass `async: true`, this runs the test case
    #    concurrently with other test cases
    use ExUnit.Case, async: true

    # 4) Use the `test` macro instead of `def` for clarity.
    test "the truth" do
      assert true
    end
  end
  </pre></code>
</div>
<div class="red">iex</div>
<div>
  iex is like irb after a haircut and a bath
</div>
<div>
  <code><pre>
  # run this
  iex(1)&gt; h
  </pre></code>
</div>
<!-- More cool stuff -->
<div>
  More cool stuff
  <ul>
    <li>concurrent</li>
    <li>distributed</li>
    <li>fault tolerance</li>
  </ul>
</div>

<div class="red">Concurrent</div>
<div>
  kick off <span class="red">n</span> elixir processes using all cores/processors on your machine
</div>
<div>
  <code><pre>
  # from https://pragprog.com/book/elixir/programming-elixir
  defmodule Parallel do
    def pmap(collection, func) do
    collection
    |&gt; Enum.map(&amp;(Task.async(fn -&gt; func.(&amp;1) end)))
    |&gt; Enum.map(&amp;Task.await/1)
    end
  end
  </pre></code>
</div>
<!-- distributed message passing -->
<div class="red">dis -- trib -- uted</div>
<div>
  <code><pre>
    # mom
    defmodule Mom do
      def listen_to_ian do
        receive do
          {"what's for dinner", ian_pid} -&gt; 
            send ian_pid, {"Meatloaf"}
            listen_to_ian
          {_, ian_pid} -&gt;
            send ian_pid, {"Ask your father."}
            listen_to_ian
        end
      end
    end

    # ian
    mom_pid = Node.spawn_link :"mom@LM-BOS-00871665", fn -&gt;
      Mom.listen_to_ian
    end
    send mom_pid, {"what's for dinner", self}
  </pre></code>
</div>
<!-- fault tolerant -->
<div class="red">fault tolerant</div>
<div>From OTP, we have "code supervising code"</div>
<div>
  <code><pre>
   # http://elixir-lang.org/docs/stable/elixir/Supervisor.html
   # define a server to be supervised
   defmodule Stack do
    use GenServer

    def start_link(state) do
      GenServer.start_link(__MODULE__, state, [name: :sup_stack])
    end

    def handle_call(:pop, _from, [h|t]) do
      {:reply, h, t}
    end

    def handle_cast({:push, h}, t) do
      {:noreply, [h|t]}
    end
  end
  </pre></code>
</div>
<div>
  <code><pre>
    # Import helpers for defining supervisors
    import Supervisor.Spec

    # We are going to supervise the Stack server which will
    # be started with a single argument [:hello]
    children = [
      worker(Stack, [[:hello]])
    ]

    # Start the supervisor with our one child
    {:ok, pid} = Supervisor.start_link(children, strategy: :one_for_one)
  </pre></code>
</div>
<div>
  <code><pre>
    iex&gt; GenServer.call(:sup_stack, :pop)

    iex&gt; GenServer.cast(:sup_stack, {:push, :world})

    iex&gt; GenServer.call(:sup_stack, :pop)
  </pre></code>
</div>
<div class="red">Phoenix</div>
<div>
  <h3>Phoenix (<a href="https://github.com/phoenixframework/phoenix">code</a>)</h3>
  <ul>
    <li>Goal is to be able to use it for everything you use rails for</li>
    <li>PubSub "out of the box"</li>
    <li>Each request is a location-transparent elixir process</li>
    <li>Long-running requests do not affect throughput (blocking in controllers is ok!)</li>
  </ul>
</div>
<div>
  A couple things I built while learning elixir
</div>
<div>
  <h2 class="center">elixir hangman</h2>
  <br/>
  <a href="https://github.com/montague/elixir_hangman">https://github.com/montague/elixir_hangman</a>
</div>
<div>
  This presentation!
  <img src="images/mind_blown.gif"/>
</div>
<!-- Resources -->
<div>
  <h3>Resources</h3>
  <ul>
    <li><a href="http://elixir-lang.org/">http://elixir-lang.org/</a></li>
    <li><a href="https://github.com/phoenixframework/phoenix">https://github.com/phoenixframework/phoenix</a></li>
    <li><a href="http://www.infoq.com/interviews/valim-elixir">http://www.infoq.com/interviews/valim-elixir</a></li>
    <li><a href="https://news.ycombinator.com/item?id=8671618">https://news.ycombinator.com/item?id=8671618</a></li>
    <li><a href="https://news.ycombinator.com/item?id=8188949">https://news.ycombinator.com/item?id=8188949</a></li>
    <li><a href="https://github.com/montague/elixir-talk-web-app">https://github.com/montague/elixir-talk-web-app</a></li>
  </ul>
</div>
